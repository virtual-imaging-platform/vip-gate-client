package fr.insalyon.creatis.vip.cligatelab.controller;import fr.insalyon.creatis.vip.cligatelab.util.Util;import fr.insalyon.creatis.vip.cligatelab.view.StartMenu;import fr.insalyon.creatis.vip.cligatelab.view.StatusMonitor;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.IOException;import java.util.Arrays;import java.util.regex.Matcher;import java.util.regex.Pattern;import static fr.insalyon.creatis.vip.cligatelab.controller.Main.*;/** * Created by qifan on 2017/6/30. */public class StatusButtonControl implements ActionListener {    StartMenu startMenu;    public StatusButtonControl(StartMenu startMenu) {        this.startMenu = startMenu;    }    @Override    public void actionPerformed(ActionEvent e) {        new Thread(() -> {            startMenu.getSpinnerGif().setVisible(true);            Util.callVipCliCommand(                    "executions",                    Arrays.asList(                            "-formatted"                    ),                    (Process ps) -> {                        String stdErr = Util.getStringFromInputStream(ps.getErrorStream());                        System.err.println(stdErr);                        String stdOut = Util.getStringFromInputStream(ps.getInputStream());                        startMenu.getSpinnerGif().setVisible(false);                        if (stdErr.equals("")) {                            if (!stdOut.equals("")) {                                //content is a 2d table contains executions                                Object[][] content = parseStdOut(stdOut);                                //filteredContent is a 2d table contains gate executions                                Object[][] filteredContent = parseStdOutFiletered(stdOut);                                //for executions of ALL Types, do not need to relaunch or download                                Object columnNames[] = {"Execution Name", "Pipeline Identifier", "Start Date", "Status"};                                //for gate lab executions, need to relaunch and download                                Object filteredColumnNames[] = {"Execution Name", "Pipeline Identifier", "Start Date", "Status", "result", "relaunch"};                                StatusMonitor statusMonitor = new StatusMonitor(columnNames, filteredColumnNames, content, filteredContent);                                statusMonitor.setCallingFrame(startMenu.getActualFrame());                                startMenu.getActualFrame().setVisible(false);                            } else {                                System.out.println("no execution");                            }                        }                    }            );        }).start();    }    /**     * parse the stdout and take only gatelab execution     * the form of stdout is Name,pipelineId,startdate,status,executionid&&&Name,pipelineId...     * @param stdOut     * @return     */    public Object[][] parseStdOutFiletered(String stdOut) {        String[] stdOutByLine = stdOut.split("&&&");        Object[][] content = new Object[stdOutByLine.length][6];        for (int i = 0; i < stdOutByLine.length; i++) {            String[] tmp = stdOutByLine[i].split(",");            System.arraycopy(tmp, 0, content[i], 0, tmp.length);            content[i][5] = content[i][4];        }        int count = 0;        for (int i = 0; i < content.length; i++) {            if (((String) content[i][1]).contains("GateLab")) {                count++;            }        }        Object[][] filtered = new Object[count][6];        count = 0;        for (int i = 0; i < content.length; i++) {            if (((String) content[i][1]).contains("GateLab")) {                try {                    System.arraycopy(content[i], 0, filtered[count], 0, content[i].length);                } catch (ArrayIndexOutOfBoundsException e) {                    System.err.println(i + " " + count);                }                count++;            }        }        return filtered;    }    /**     * parse the stdout to a 2d table     * the form of stdout is Name,pipelineId,startdate,status,executionid&&&Name,pipelineId...     * @param stdOut     * @return     */    private Object[][] parseStdOut(String stdOut) {        String[] stdOutByLine = stdOut.split("&&&");        Object[][] tb = new Object[stdOutByLine.length][4];        for (int i = 0; i < stdOutByLine.length; i++) {            String[] tmp = stdOutByLine[i].split(",");            try {                System.arraycopy(tmp, 0, tb[i], 0, tmp.length - 1);            } catch (ArrayIndexOutOfBoundsException ae) {                System.err.println("********* " + (tmp.length - 1));            }        }        return tb;    }}